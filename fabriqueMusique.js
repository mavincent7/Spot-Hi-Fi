myApp.addModule.apply(myApp.metier.musique,["createInstance", function(){	var PrivateInstanceConstructor = function(){ 		this.musique = {};		this.dataError = false ; 	}; 	PrivateInstanceConstructor.prototype.addError = function(propertyName,message ){		if (this.dataError === false){			this.dataError = {};		} 		this.dataError[propertyName] = message;	}; 	PrivateInstanceConstructor.prototype.setPropertyOrError = function(propertyName,value){		var resultTestRegex = myApp.metier.musique.testRegex(propertyName,value);		this.musique [propertyName] = value;		if (resultTestRegex === true){			delete this.dataError[propertyName];		}else{			PrivateInstanceConstructor.prototype.addError.call (this,propertyName," Propriété "+ value +" invalide : "+ resultTestRegex);		} 	}; 	PrivateInstanceConstructor.prototype.hasError = function(){		if (this.dataError === false){			return false ;		} 		for (var propertyName in this.dataError){			if (this.dataError.hasOwnProperty(propertyName)){				return true;			}		} 		return false ;	}; 	PrivateInstanceConstructor.prototype.getErrorList = function(){		var errorList = []; 		for (var propertyName in this.dataError){			if (this.dataError.hasOwnProperty(propertyName)){				errorList.push(propertyName);			}		} 		return errorList ;	}; 	var generateRandomId = function(){		var idLength = 10;		var resultat = "";		var hexaDigits = Array("0","1","2","3","4","5","6","7","8","9","a","b","c" ,"d","e","f");		var i;		for (i=0; i<10; ++i){			resultat += hexaDigits[Math. floor(Math.random()*16)];		}		return resultat; 	} 	var fabriqueInstance = function(inputObj,privateInstance){		var PublicInstanceConstructor = function(){			var musiqueMethods = myApp.metier.musique;			if (inputObj === null){				privateInstance.musique = {					id: generateRandomId(),				};			}			else{				for (var i = 0; i<musiqueMethods.getPropertyList().length; ++i){					var propertyName = musiqueMethods.getPropertyList()[i];					privateInstance.setPropertyOrError(propertyName,inputObj[propertyName]) ;				}			} 			this.getProperty = function(propertyName){				return privateInstance.musique[propertyName];			}; 			this.setProperty = function(propertyName,value){				return privateInstance.setPropertyOrError(propertyName,value);			}; 			this.hasError = function(){				return privateInstance.hasError();			}; 			this.getErrorMessage = function(propertyName){				return privateInstance.dataError[propertyName];			}; 			this.getErrorList = function(){				return privateInstance.getErrorList();			}; 		};		PublicInstanceConstructor.prototype = myApp.metier.musique;		return new PublicInstanceConstructor(inputObj);	};	return function(inputObj){		return fabriqueInstance(inputObj,new PrivateInstanceConstructor());	}; }()]);