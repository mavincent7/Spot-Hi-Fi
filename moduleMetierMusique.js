myApp.addModule.apply(myApp.metier,["musique", function(){	var regexUtil = myApp.metier.regexUtil ;	var propertiesPatterns = {		id: {			regexTest:function(chaine){				if (/^[0-9a-f]{10}$/i.test(chaine) === true){					return true;				}				else{					return "L'identifiant doit comporter 10 chiffres hexa.";				}			},		labelText : "Identifiant"		},		artiste: {			regexTest:function(chaine){				if (regexUtil.testRegexLatin1WithDigitsPunctuation({chaine : chaine ,minLength : 1, maxLength : 255 }) === true) {					return true;				}				else{					return "Le artiste de l'artiste est obligatoire et peut contenir des lettres et des chiffres.";				}			},			labelText : "Artiste"		},		titre: {			regexTest:function(chaine){				if (regexUtil.testRegexLatin1WithDigitsPunctuation({chaine : chaine ,minLength : 1, maxLength : 255 }) === true) {					return true;				}				else{					return "Le titre est obligatoire et peut contenir des lettres et des chiffres.";				}			},			labelText : "Titre"		},		album: {			regexTest:function(chaine){				if (regexUtil.testRegexLatin1WithDigitsPunctuation({chaine : chaine ,minLength : 0, maxLength : 255 }) === true) {					return true;				}				else{					return "L'album n'est pas obligatoire et peut contenir des lettre et des chiffres.";				}			},			labelText : "Album"		},		date: {			regexTest:function(chaine){				if (regexUtil.testRegexDate({chaine : chaine ,minLength : 4, maxLength : 4 }) === true) {					return true;				}				else{					return "La date est obligatoire et doit être sous le format \"YYYY\"";				}			},			labelText : "Date"		}	};		var propertyList = function(){		var liste = [];		for (var propertyName in propertiesPatterns){			if (propertiesPatterns.hasOwnProperty(propertyName)){				liste.push(propertyName);			}		}		return liste;	}();	var publicInterfaceMusique = {		getPropertyList : function(){			return propertyList;		},		getLabelText : function(propertyName){			return propertiesPatterns[propertyName].labelText;		},		testRegex : function(propertyName,value){			if (propertiesPatterns [propertyName] === undefined){				return "La propriété " + propertyName + " n'existe pas";			}			else{				return propertiesPatterns[propertyName].regexTest(value);			}		}	};	return publicInterfaceMusique;}()]);